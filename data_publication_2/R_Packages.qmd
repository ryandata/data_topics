---
title: "R_Packages"
author: "Ryan Womack"
date: "2023-08-15"
toc: true
number-sections: true
highlight-style: pygments
output: html_document
format:
  html: 
    code-fold: true
    html-math-method: katex
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
  docx: default
theme: sketchy
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Packages

### The R packages book, by Wickham and Bryan

This is a brief introduction to R package creation, taking as its text the book [R Packages, 2nd edition](https://r-pkgs.org) by Hadley Wickham and Jennifer Bryan.  This book is freely available on the web, so please consult for further details of topics that are only outlined here.  The second edition has been finalized in June 2023.

### Install and load packages

The fundamental packages required to create an R package are _devtools_, _roxygen2_, and _testthat_.  Please install these with the following commands if they are not already available on your system.  These will not install by default if you just attempt to run this R markdown file.
```{r install packages, eval=FALSE}
install.packages("devtools", dependencies=TRUE)
install.packages("roxygen2", dependencies=TRUE)
install.packages("testthat", dependencies=TRUE)

devtools::session_info()
```
Let's load those libraries now.
```{r libraries}
library(devtools)
library(roxygen2)
library(testthat)
```
We can check that we're running recent enough versions of our software with the _packageVersion_ command for indivual packages, or _session_info_ for our entire setup.
```{r versions}
packageVersion("devtools")

devtools::session_info()
```

### Outline of the creation of a little package

We'll follow along with [Chapter 1](https://r-pkgs.org/whole-game.html) of the R Packages book and walk through the creation of a little package, even simpler than the "toy package" presented in the text.

This will enable us to review the fundamental features of a typical package:

* functions
* version control
* documentation (_roxygen2_)
* testing (_testthat_)
* creation of a README.Rmd file

After we do this for our little package, we'll coverage some additional details relating to the steps above.

### Create_package function

We call _create_package_ to initiate a package.  We want to start this in its own fresh directory, not a pre-existing project or git repository.  The _create_package_ function will set up the necessary folder structure for a package. Please *EDIT* the contents of the command below to correspond to your computer's file system.  This is the one place in the code where you'll have to modify it.  Note that to be a valid package name and to be allowed on CRAN, the package name should:

* Contain only ASCII letters, numbers, and '.'
* Have at least two characters
* Start with a letter
* Not end with '.'

```{r create package}
create_package("/home/ryan/R/littlePackage")
```

This will launch a new window.  To be able to continue using our script here, just close that window and navigate in the original window to the package directory (same as what you used above), either via the RStudio Files window or with the following _setwd_ command (modified with the directory you used).  Alternatively, you could open the markdown file in the new session, but be sure to rerun the library commands in lines 30-32 above.

```{r setwd}
setwd("/home/ryan/R/littlePackage")
```
The "dot files" beginning with a period (.) are used to store a history of the R session and to tell R and git to ignore certain files.  Generally we can leave these files as is and let R worry about how to handle them.  You shouldn't need to modify these files in most circumstances.

Likewise, the .Rproj file is usually left unmodified.  This helps RStudio manage the package folder as a project.

The NAMESPACE is also a file we won't edit.  It is used to keep track of relations between functions that your package will use, but you can let RStudio handle this.

One of the two locations that we *WILL* edit are the *DESCRIPTION*, which is a structured way of providing information about your package.  This is what you will see when you look up the function in the R help system, or what would be displayed if your package makes it onto CRAN.  For example, try typing ?testthat to see the description of that package.

The other is the *R* folder.  This is the folder that we will put our functions into.  Optionally we could add a *data* folder as well, if we wanted to distribute data via our package.

It is quite convenient to use _create_package_ to take care of all of this for us.

### Git

We won't go into any details about *git* or *github* usage, except to note that it is common and desirable to use this form of version control for your work, and also for sharing and collaboration.  To initiate the use of git in any R project (not just packages), use the command _use_git_, without any parameters or options.

```{r use git}
use_git()
```



